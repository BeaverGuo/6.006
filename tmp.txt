The operation HEAP-DELETE(A, i) deletes the item in node i from heap A. Give an implementation of HEAP-DELETE that runs in O(lg n) time for an n-element max-heap.

Answer

HEAP-DELETE(A, i):
    if A[i] < A[A.heap-size]
        HEAP-INCREASE-KEY(A, i, A[A.heap-size])
        A.heap-size -= 1
    else
        A[i] = A[A.heap-size]
        A.heap-size -= 1
        MAX-HEAPIFY(A,i)
Notice: What's wrong with the implementation bellow?

HEAP-DELETE(A, i):
    A[i] = A[A.heap-size]
    A.heap-size -= 1
    MAX-HEAPIFY(A, i)
You can't assume there always be A[i] > A[A.heap-size]. For example:

      10
    /    \
   5      9
  / \    / \
 2   3  7   8
If you want to delete key 2, the A[A.heap-size] is 8. But 8 should climb up to the position of 5.



MAX-HEAPIFY go down and HEAP-INCREASE-KEY go up.